ѕеред ¬ами тестовый проект на писанный на €зыке Golang.  ќн представл€ет собой crud и позвол€ет вести список пользователей. ¬ести список могут только администраторы прошедшие авторизацию и получившие jwt token.
ƒл€ оценки работы приложени€, ¬ам понадоб€тс€:
- —качать и установить €зык  Golang 1.15:   https://golang.org 
- —качать и установить —”Ѕƒ PostgreSQL 13:   https://www.postgresql.org/
- —качать и установить платформу совместной работы дл€ разработчиков API Postman:   https://www.postman.com.
- —качать и установить IDE Sublime Text
“ак же необходимы такие пакеты дл€ €зыка Go:
"fmt"
"time"
"log"
 "os"
"database/sql"
"github.com/lib/pq"
"encoding/json"
"github.com/gorilla/mux"
"github.com/dgrijalva/jwt-go"
"net/http"
"strconv"
"database/sql"
"encoding/json"
ћногие из этих пакетов не €вл€ютс€ стандартными и дл€ их установки ¬ам нужно будет набрать в консоли: go get <им€ пакета>
“ак же при разработке проекта были использованы: gofmt, goimports, govet.
¬ —”Ѕƒ  PostgreSQL создайте базу данных УusersФ и добавьте в нее такие две таблицы:
- УusersФ ( УIdФ int, УNameФ text, УAgeФ text)
- УadminФ(УNameФ  text, УPasswordФ  text)
—клонируйте репозиторий с проектом и откройте его в IDE, кот. поможет вам настроить и скомпилировать проект, проверить правильность и полноту установки пакетов.
”становить настройки нужно в файле settings/settings.cfg
ќткройте консоль и перейдите в корневой каталог проекта. Ќаберите команду:                go build main.go, котора€ создаст файл: main.exe. «апустите его в консоли на выполнение. 
≈сли в процессе работы приложени€ будут возникать ошибки, то они будут записаны логером в файл logger/info.log
«апустите Postmen. ¬ыберите ФPostФ запрос. ¬ адресной строке введите: localhost:8020/admin. ѕерейдите в заголовки запроса.  ¬ колонке УKeyФ, создайте два заголовка: УNameФ и УPasswordФ. Ќапротив каждой созданной ¬ами записи, в колонке УvalueФ, введите им€ администратора и его пароль соответственно. ¬ колонке УKeyФ создайте еще один заголовок УContent-typeФ, а напротив в колонке, в колонке УvalueФ, введите: Уapplication/jsonФ. Ќажмите кнопку УSendФ. “еперь ¬ы зарегистрированы как администратор.
 ¬ы можете отредактировать свой пароль, или удалить запись отправив соответственно запросы УPUTФ и УDELETEФ, но дл€ этого ¬ам понадобитс€  JWT token. „тобы получить его, выберите запрос УGETФ на адрес: localhost:8020/.¬ведите свое им€ и пароль в заголовках, так как ¬ы это делали до этого и нажмите кнопку УSendФ. ¬ ответ ¬ы получите длинную строку символов Ц это и есть токен. ќн действителен в течении 40 минут. —копируйте строку токена. —оздайте новый заголовок с названим Token, а в качестве значени€  - вставьте строку токена. “еперь им€ и пароль ¬ам не понадоб€тс€ до окончани€ срока действи€ токена и ¬ы можете создавать и редактировать записи пользователей. 
ƒл€ создани€ пользовател€, отправьте УPOSTФ запрос с телом вида: {"Id":1",Name":"u","Age":2}  на адрес: localhost:8020/users. 
ƒл€ поиска одного пользовател€ по его id,  нужно отправить УGETФ запрос на адрес: localhost:8020/users/1, где 1 Ц это  и есть Id который может быть любым числом, но уникальным.
ƒл€ редактировани€ пользовател€, отправьте УPUTФ запрос с телом вида: {"Id":1",Name":"u","Age":2}  на адрес: localhost:8020/users/{Id}. Id пользовател€ указываетс€ без скобочек.
 ƒл€ просмотра всех пользователей, отправьте УGETФ запрос на адрес: localhost:8020/users.
ƒл€ удалени€ записи пользовател€, отправьте УDELETEФ запрос на адрес: localhost:8020/users/{Id}


 

